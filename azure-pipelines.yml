# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'
#  demands:
#  - msbuild

variables:
  buildConfiguration: 'Release'

steps:
- task: PowerShell@2
  displayName: 'Patch versions of projects'
  inputs:
    targetType: filePath
    filePath: ./ver/UpdateVersions.ps1
    arguments: '-useEnvBuild'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: 'src/Magic.Specs/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: 'tests/**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: ReportGenerator
  inputs:
    reports: '$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    assemblyfilters: '-xunit*'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

# Publish
- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src/Magic.Specs/*.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: true


- task: DotNetCoreCLI@2
  displayName: 'Create Nuget packages (dotnet pack)'
  condition: and(succeeded(), or(eq(variables['publishNugetToDevops'], true),variables['publishNugetToNugetOrg'], true)))
  inputs:
    command: pack
    packagesToPack: 'src/Magic.Specs/*.csproj'
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: 'Push Nuget packages to Devops'
  condition: and(succeeded(), eq(variables['publishNugetToDevops'], true))
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '1d84f180-3f51-42f4-aba3-0e9127dda48d'
#nuget.exe push -Source "PreviewFeed" -ApiKey AzureDevOps my_package.nupkg

- task: DotNetCoreCLI@2
  displayName: 'Push Nuget packages to nuget.org'
  condition: and(succeeded(), eq(variables['publishNugetToNugetOrg'], true))
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'external'
    publishVstsFeed: '1d84f180-3f51-42f4-aba3-0e9127dda48d'